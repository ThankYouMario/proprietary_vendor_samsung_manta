#!/bin/sh
set -e
SCRIPT_NAME=$(basename $0)
KERNEL_NAME=$(uname -s)

# Kick off with generic configuration

VENDOR=samsung
DEVICE=manta
echo "# VENDOR=$VENDOR"
echo "# DEVICE=$DEVICE"

# Do a bit more generic configuration

for ROOT in $(dirname $0) .; do
    for MID in ../../.. ../.. .. .; do
        if [ -d $ROOT/$MID/vendor/$VENDOR/$DEVICE ]; then
            REPO_ROOT=$ROOT/$MID/vendor/$VENDOR/$DEVICE
        fi
    done
done
if [ -z $REPO_ROOT ]; then
    REPO_ROOT=$(dirname $0)
fi
if [ $KERNEL_NAME == "Linux" ]; then
    REPO_ROOT=$(readlink -m $REPO_ROOT)
fi
echo "# REPO_ROOT=$REPO_ROOT"

# Follow up with even more generic configuration

BLOBS_ROOT=$REPO_ROOT/proprietary
VENDOR_MAKEFILE=$REPO_ROOT/$DEVICE-vendor.mk
BLOBS_MAKEFILE=$REPO_ROOT/$DEVICE-vendor-blobs.mk
echo "  BLOBS_ROOT=$BLOBS_ROOT"
echo "  VENDOR_MAKEFILE=$VENDOR_MAKEFILE"
echo "  BLOBS_MAKEFILE=$BLOBS_MAKEFILE"

# All hail the common header

HEADER="# Copyright (C) $(date +"%Y") ParanoidAndroid Project
#
# Licensed under the Apache License, Version 2.0 (the \"License\");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \"AS IS\" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file was automatically generated by vendor/$VENDOR/$DEVICE/extract.sh"

# Look up the proprietary-blobs.txt file to use

if [ -f $REPO_ROOT/proprietary-blobs.txt ]; then
    BLOBS_TXT=$REPO_ROOT/proprietary-blobs.txt
elif [ -f $REPO_ROOT/../../../device/$VENDOR/$DEVICE/proprietary-blobs.txt ]; then
    BLOBS_TXT=$REPO_ROOT/../../../device/$VENDOR/$DEVICE/proprietary-blobs.txt
else
    echo ""
    echo "    $SCRIPT_NAME: missing proprietary-blobs.txt"
    echo ""
    echo "    A proprietary-blobs.txt file was expected either in"
    echo "    the vendor repository or in the regular device tree"
    echo "    (device/$VENDOR/$DEVICE/) but could not be found."
    echo ""
    exit 1
fi
if [ $KERNEL_NAME == "Linux" ]; then
    BLOBS_TXT=$(readlink -m $BLOBS_TXT)
fi
echo "# BLOBS_TXT=$BLOBS_TXT"

# Check on what the source should be set to

if [ $# -eq 0 ]; then
    SOURCE=adb
elif [ $# -eq 1 ]; then
    SOURCE=$1
else
    echo ""
    echo "    $SCRIPT_NAME: unexpected arguments specified"
    echo ""
    echo "    usage: $SCRIPT_NAME [path-to-source]"
    echo ""
    echo "    If the path-to-source argument gets specified, it should be"
    echo "    the absolute path to the root of the extracted device's image."
    echo "    If not specified, it is set as adb instead, denoting that the"
    echo "    connected device will be the source of the files."
    echo ""
    exit 2
fi
if [ $KERNEL_NAME == "Linux" ] && [ $SOURCE != adb ]; then
    SOURCE=$(readlink -m $SOURCE)
fi
echo "# SOURCE=$SOURCE"

# Do simple initial checks before continuing

if [ ! -d $BLOBS_ROOT ]; then
    echo ""
    echo "    $SCRIPT_NAME: missing blobs root directory"
    echo ""
    echo "    To continue with the current configuration, manually"
    echo "    create ${BLOBS_ROOT}."
    echo ""
    exit 3
fi

if [ $SOURCE != adb ] && [ ! -d $SOURCE ]; then
    echo ""
    echo "    $SCRIPT_NAME: missing source directory"
    echo ""
    echo "    To continue with the current configuration, extract"
    echo "    your device to ${SOURCE}."
    echo ""
    exit 4
fi

# Throw in a simple seperator

echo ""

# Make sure we really have a source

if [ $SOURCE == adb ]; then
    echo "Waiting for the connected device..."
    adb wait-for-device
fi

# Stop preparing and start by removing all old files

echo "Making old files disappear..."
rm -rf $BLOBS_ROOT/*

# Do the real pulling and copying of files

echo "Making new files appear..."
for FILE in $(cat $BLOBS_TXT | grep -v -E '^ *(#|$)' | sed 's/^[-\/]*//' | sort -s); do
    # Ensure we have a target directory
    FILE_DIR=$(dirname $FILE)
    if [ ! -d $BLOBS_ROOT/$FILE_DIR ]; then
        mkdir -p $BLOBS_ROOT/$FILE_DIR
    fi

    # Pull and copy!
    if [ "$SOURCE" = "adb" ]; then
        adb pull -p -a $FILE $BLOBS_ROOT/$FILE
    else
        cp $SOURCE/$FILE $BLOBS_ROOT/$FILE
    fi
done

# Inform the user of the good status

echo "Done with moving files. Setting up makefiles..."

# Throw in a clean, generic makefile as soon as possible

(cat << EOF) > $VENDOR_MAKEFILE
$HEADER

# An overlay for features that depend on proprietary files
DEVICE_PACKAGE_OVERLAYS := vendor/$VENDOR/$DEVICE/overlay

\$(call inherit-product, vendor/$VENDOR/$DEVICE/$DEVICE-vendor-blobs.mk)
EOF

# Tell the builder what proprietary files we want included

echo -n "$HEADER

PRODUCT_COPY_FILES +=" > $BLOBS_MAKEFILE
for FILE in $(cat $BLOBS_TXT | grep -v -E '^ *(#|$)' | sed 's/^[-\/]*//' | sort -s); do
    echo -n " \\
    vendor/$VENDOR/$DEVICE/proprietary/$FILE:$FILE" >> $BLOBS_MAKEFILE
done
echo "" >> $BLOBS_MAKEFILE

# Throw in an additional empty board configuration

(cat << EOF) > $REPO_ROOT/BoardConfigVendor.mk
$HEADER
EOF

# Let the user know we performed well and finished nicely

echo "Done with setting up makefiles."
